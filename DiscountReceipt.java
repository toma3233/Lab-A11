/**
 * Simulates the receipt of discounted items generated by a clerk
 * @author Tom Abraham
 * period  1
 *
 */
public class DiscountReceipt extends GroceryReceipt {
	private boolean preferred;//Receipt is for a preferred customer or not
	private int discountCount;//Number of discounted items
	private double discountAmount;//Total discount

	/**
	 * Initializes the clerk to the passed in employee,
	 * the receipt to an empty string, total, internalDiscount to 0
	 * and the preferred flag to the passed in value
	 * @param clerk - employee gnerating this receipt
	 * @param preferred - true if the receipt is for a preferred customer,
	 * 					  false otherwise. Only preferred customers would
	 * 					  get a discount.
	 */
	public DiscountReceipt(Employee clerk, boolean preferred) {
		super(clerk);
		this.preferred = preferred;
		discountCount = 0;
		discountAmount = 0.00;
	}
    
    /**
     * Returns the number of discounted items
     * @return discount count
     */
	public int getDiscountCount() {
		return discountCount;
	}
    /**
     * Returns the total discounted amount
     * @return total discounted amount
     */
	public double getDiscountAmount() {
			return (double) Math.round(discountAmount * 100.00) / 100.00;
	}
	/**
     * If the receipt is for a preferred customer and the item is discounted,
     * updates the discount count and the discount amount. Then it adds the item
     * to the receipt
     * @param i - Represents the item passed into the method
     */
	@Override
	/**
	  * This method overrides the method of the GroceryReceipt class. 
	  * It updates the discount count and the total discount if the receipt is for a preferred customer and the item discount is nonzero.
	  * Lastly, it adds the item to the receipt and adds the price to the total.
	  * @param i - Represents the item passed into the method
	  */
	public void add(Item i) {
		if (preferred == true && i.getDiscount() != 0) {
			discountCount++;
			discountAmount += i.getDiscount();
			super.add(i);
		}
		else {
			super.add(i);
		}
	}
	/**
	 * Returns the net price after discount
	 * @return net price after discount
	 */
	public double getTotal() {
		return (double) Math.round((super.getTotal() - discountAmount) * 100.00) / 100.00; 
	}
    /**
     * Calculates and returns the percent discount
     * @return discount percent
     */
	public double getDiscountPercent() {
		return (double) Math.round(((discountAmount / super.getTotal()) * 100) * 100.00) / 100.00;
	}
	/**
	 * Returns a string with list of items (one per line), total receipt amount, total
	 * discount amount, number of discounted items, percent discount and total amount 
	 * after discount
	 * @return a string of list of items with discounted price information
	 */
	public String toString() {
		return super.toString2() + "\n" + "Sub-Total: $" + super.getTotal() + "\n" + "Discount: $" + String.format("%.2f", discountAmount) + "\n" + "Number of discounted items: " + discountCount + "\n" + "Discount percent: " + String.format("%.2f", getDiscountPercent()) + "%" + "\n" + "Total: $" + getTotal();
	}
}
