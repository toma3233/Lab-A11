/**
 * Simulates a grocery receipt generated by a clerk
 * @author Tom Abraham
 * period  1
 *
 */
public class GroceryReceipt {
	private Employee clerk;//Employee object representing the clerk generating the receipt
	private String receipt;//List of items
	private double total;//Total price
	
	/**
	 * Initializes the clerk to the passed in employee,
	 * the receipt to an empty string and total to 0
	 * @param clerk - employee generating this receipt
	 */
	public GroceryReceipt(Employee clerk) {
		this.clerk = clerk;
		receipt = "";
		total = 0.00;
	}
	
	/**
	 * Returns the total amount on this receipt in dollars and cents
	 * @return total amount
	 */
	public double getTotal() {
		return (double) Math.round(total * 100.00) / 100.00;
	}
	/**
	 * Returns the clerk generating the information
	 * @return clerk 
	 */
	public Employee getClerk() {
		return clerk;
	}
	/**
	 * Returns the list of items
	 * @return receipt
	 */
	public String getReceipt() {
		return receipt;
	}
	/**
	 * Adds the given item to the receipt
	 * Updates the total by adding in the the items price
	 * @param i - grocery item to be added
	 */
	public void add(Item i)
	{
		receipt = getReceipt() + i;
		total = total + i.getPrice();
	}
	
	/**
	 * Returns the value passed as a string in the dollar and cents format ####.##
	 * @param value - value to be converted to dollar and cents format
	 * @return String in dollar and cents format
	 */
	public String valueToString(double value) {
		String valueInStringForm1 = String.valueOf(value);
		return valueInStringForm1;
	   
	}
	
	/**
	 * Returns a string with list of items (one per line) and total receipt amount
	 * @return a string with list of items and total receipt amount
	 */
	
	public String toString() {
		return getReceipt() +"\n" + "Total: $" + getTotal();
	}
		/**
	 * Returns a string with list of items (one per line) 
	 * @return a string with list of items
	 */
	public String toString2(){
	   return getReceipt();
	}

	
	
}
